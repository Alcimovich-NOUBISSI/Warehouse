@model Store.Models.DataViewModels.EditUserViewModel

@{
    ViewData["Title"] = "Edit";
}

<h2>Edit a User</h2>

@using (Html.BeginForm("OnPost", "Users"))
{

  <fieldset>
    @Html.HiddenFor(h => @Model.User.Id);
    <div class="form-group">
      <label asp-for="@Model.User.FName" class="form-label mt-4"></label>
      <input asp-for="@Model.User.FName" type="text" class="form-control" aria-describedby="emailHelp">
      <span asp-validation-for="@Model.User.FName" class="text-danger"></span>
    </div>
    <div class="form-group mb-3">
      <label asp-for="@Model.User.LName" class="form-label mt-4"></label>
      <input asp-for="@Model.User.LName" type="text" class="form-control" aria-describedby="emailHelp">
      <span asp-validation-for="@Model.User.LName" class="text-danger"></span>
    </div>
    <div class="form-group mb-3">
      <label asp-for="@Model.User.UserName" class="form-label mt-4"></label>
      <input asp-for="@Model.User.UserName" type="text" class="form-control" aria-describedby="emailHelp">
      <span asp-validation-for="@Model.User.UserName" class="text-danger"></span>
    </div>
    <div class="my-3">

        @for (int i = 0; i < @Model.Roles.Count(); i++)
        {
            <div class="form-check">
                @Html.CheckBoxFor(c => @Model.Roles[i].Selected)
                @Html.HiddenFor(h => @Model.Roles[i].Value)

                @Html.LabelFor(l => @Model.Roles[i].Selected, @Model.Roles[i].Text, new {@class="form-check-label"})
                @Html.HiddenFor(h => @Model.Roles[i].Text)
            </div>
        }
    </div>
    <button type="submit" class="btn btn-warning">Update</button>
    <a asp-controller="Users" asp-action="Index" class="btn btn-primary">Back To List</a>
  </fieldset>
}


@section Scripts {
    @{
        <partial name="_ValidationScriptsPartial.cshtml"/>
    }
}